% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{oracle}
\alias{oracle}
\title{Construct oracle output for network regression}
\usage{
oracle(
  A,
  X,
  y,
  d,
  U,
  V,
  beta0vec,
  beta_hat,
  epsa,
  epsy,
  A_hat,
  l = NA,
  weights = observed,
  method,
  multi_rank = TRUE,
  U_perp,
  V_perp,
  d_perp
)
}
\arguments{
\item{A}{The original adjacency matrix}

\item{X}{The design matrix}

\item{y}{The response vector}

\item{d}{A vector of singular values (first entry used as primary rank)}

\item{U}{Matrix of left singular vectors (e.g., true \code{u} basis)}

\item{V}{Matrix of right singular vectors (e.g., true \code{v} basis)}

\item{beta0vec}{The true regression coefficient vector}

\item{beta_hat}{An estimated or debiased coefficient vector}

\item{epsa}{The true or estimated latent noise level for \code{A}}

\item{epsy}{The true or estimated noise level for \code{y}}

\item{A_hat}{A possibly denoised version of \code{A}}

\item{l}{The optimal or chosen regularization parameter}

\item{weights}{Logical vector indicating observed outcomes}

\item{method}{A character string indicating the estimation method name}

\item{multi_rank}{Logical; whether to include orthogonal components beyond rank-1}

\item{U_perp}{Orthogonal left singular vectors (if \code{multi_rank = TRUE})}

\item{V_perp}{Orthogonal right singular vectors (if \code{multi_rank = TRUE})}

\item{d_perp}{Singular values for orthogonal components (if \code{multi_rank = TRUE})}
}
\value{
A list with all inputs stored, and derived quantities such as residuals and low-rank components included
}
\description{
This function outputs an oracle estimator,
where true centralities and regression coefficients are known.
Useful for simulation studies and validation against estimated procedures.
}
\note{
This is intended primarily for simulation benchmarking and evaluation.
}
\examples{
n <- 100; p <- 3
A <- matrix(rnorm(n^2), n)
X <- matrix(rnorm(n * p), n, p)
y <- rnorm(n)
U <- matrix(rnorm(n), n); V <- matrix(rnorm(n), n)
beta0vec <- runif(p + 2)
oracle(A, X, y, d = 1, U, V, beta0vec, beta_hat = beta0vec,
       epsa = 1, epsy = 0.1, A_hat = A, weights = rep(TRUE, n),
       method = "oracle", multi_rank = FALSE)

}
\seealso{
\code{\link{ret_constructor}}, \code{\link{supercent}}, \code{\link{adjust_sign}}
}
